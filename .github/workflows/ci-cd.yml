name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort

    - name: Lint with flake8
      run: |
        flake8 src/ train_random_forest.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ train_random_forest.py --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff src/ train_random_forest.py

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ train_random_forest.py

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: true

  model-validation:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate model training (dry-run)
      run: |
        python -c "
        from train_random_forest import MODISFeatureExtractor, LandCoverClassifier
        import numpy as np

        # Test with synthetic data
        X = np.random.rand(100, 18)
        y = np.random.randint(1, 8, 100)

        classifier = LandCoverClassifier('random_forest')
        classifier.feature_names = ['feature_' + str(i) for i in range(18)]

        metrics, _ = classifier.train(X, y, n_estimators=10, max_depth=5)
        print(f'Model validation successful. Accuracy: {metrics[\"accuracy\"]:.4f}')
        "

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Run Bandit Security Lint
      uses: jpetrucciani/bandit-check@main
      with:
        path: '.'

    - name: Run Safety Check
      run: |
        pip install safety
        safety check --json
